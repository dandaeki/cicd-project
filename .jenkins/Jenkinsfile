pipeline {
    agent any
    environment {
        GC = credentials('github-cicd-project') //생성하세여
        GIT_REPO = 'cicd-project'
        GIT_USERNAME = 'dandaeki'
        TAG_VERSION = "v1.0.$BUILD_NUMBER"

    }
    triggers {
        githubPush()
    }
    stages {
        stage('maven build, test, packaging(war)') {
            agent {
                docker {
                    image 'maven:3.8.3-openjdk-17'
                    reuseNode true
                    registryUrl 'https://index.docker.io/v1/'
                    registryCredentialsId 'docker-hub'
                }
            }
            steps {
                sh 'mvn clean install'
            }     
        }
        stage('github create release') {
            steps {
                script { def response = sh(script: """                    
                        curl -sSL \
                              -X POST \
                              -H "Accept: application/vnd.github+json" \
                              -H "Authorization: Bearer ${GC_PSW}" \
                              -H "X-GitHub-Api-Version: 2022-11-28" \
                              https://api.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases \
                              -d '{
                                      "tag_name":"${TAG_VERSION}",
                                      "target_commitish":"main",
                                      "name":"${TAG_VERSION}",
                                      "body":"Description of the release",
                                      "draft":false,
                                      "prerelease":false,
                                      "generate_release_notes":false
                                    }'
                    """, returnStdout: true)

                    def json = readJSON text: "$response"
                    def id = json.id

                    sh "mv target/demo-0.0.1-SNAPSHOT.war ${GIT_REPO}-${TAG_VERSION}.war"
                        
                    sh """
                        curl -sSL \
                            -X POST \
                            -H "Accept: application/vnd.github+json" \
                            -H "Authorization: Bearer ${GC_PSW}" \
                            -H "X-GitHub-Api-Version: 2022-11-28" \
                            -H "Content-Type: application/octet-stream" \
                            "https://uploads.github.com/repos/${GIT_USERNAME}/${GIT_REPO}/releases/${id}/assets?name=${GIT_REPO}-${TAG_VERSION}.war" \
                            --data-binary "@${GIT_REPO}-${TAG_VERSION}.war"
                    """
                    sh "mv ${GIT_REPO}-${TAG_VERSION}.war ${GIT_REPO}.war"
                }
            }
        }
        stage('docker build') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub'){
                        docker.build("dandaeki/tomcat:${TAG_VERSION}", "./")
                    }

                }
            }
        }
        stage('docker image push') {
            steps {
                script{
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub') {
                        def img = docker.image("dandaeki/tomcat:${TAG_VERSION}")
                        img.push("${TAG_VERSION}")
                        img.push('latest')
                    }
                }
            }
        }
        stage ('k8s connection'){
            steps{
                script {
                    sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"'
                    sh 'chmod +x kubectl'
                    // sh './kubectl version --client'
                    // sh './kubectl --kubeconfig=$KUBE_CONFIG apply -f /vagrant/kuber-yaml/test1.yaml'
                    withKubeConfig([credentialsId: 'k8s', serverUrl: 'https://kube-controller:6443']){
                        sh 'mkdir yamlRepo'
                        sh 'cd yamlRepo && git clone https://github.com/dandaeki/yamlrepo.git'
                        sh './kubectl apply -f deploy.yaml'
                        sh 'rm -rf /yamlRepo'

                        sh './kubectl config use-context kubernetes-admin@kubernetes'
                        sh './kubectl get nodes'
                        sh './kubectl get pods'
                    }
                }
            }
        }            
    }
}